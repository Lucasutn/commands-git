Comandos de Udemy

git -- version
git help
clear
git config --gloabal user.name "Lucas"
git config --global -e (registro de modificiacion..)
ls (en que carpeta me encuentro)
ls -al (informacion itde las carpetas)
cd (moverse a otra carpeta)
git init (crear repositorio)
git status (estado de los archivos)
pwd (muestra la dirreciion de la carpeta en la que me encuentro)
git add . (agrega todos los archivos)
git commit -m "Mensaje"(guarda el proyecto como se encuentra actualmente )
git checkout --  .(recupera los cambios)
git log
git add -A (agrega todos los archivos que no fueron modificados)
git resset *.xml (para sacar excluir todos los archivos que estan en el stage)
git log --oneline
git log --oneline --decorate --all --graph

$ git config --global alias.lg "log --oneline --decorate --all --graph" (asigna
 una funcioncion a la palabra lg)

mkdir proyecto1
touch vacio.txt
cat 
rm vacio.txt
ls --la

git rm --chached historia

git config --list --show-origin

git show historia.txt(ver los cambios en el archivo)





///////////*//////*/////////////*/////////////*//////////////*////////////*///////////*///////////




El origin"" se llama comandos(git push comandos master)


ls
ls -al
pwd
cd
mkdir (crea una carpeta)
touch vacio.txt(crea archivos vacios)

cat vacio.txt (Muestra el contenido de un archivo)

rm vacio.txt (borra un archivo)

rm --help

git rm --cached historia.txt

git config --list
git config --list --show-origin
git config --global user.name "Lucas"
git config --global user.email " lucas@hotmail.com"

git diff 

git reset c8a367d0882c00dbc4d55a947f75918c5fbdb3a1 --hard
git reset c8a367d0882c00dbc4d55a947f75918c5fbdb3a1 --soft


git checkout

git log --stat

 git commit -am

git branch cabecera

git checkout cabecera

git branch

git merge cabecera

$ git remote add origin https://github.com/Lucasutn/hyperblog.git

git remote

git remote -v

git push origin master

$ git pull origin master

git pull origin master --allow-unrelated-histories

$ ssh-keygen -t rsa -b 4096 -C "lucashnutn@gmail.com"

eval $(ssh-agent -s)

ssh-add ~/.ssh/id_rsa

git remote set-url origin  git@github.com:Lucasutn/hyperblog.git

git pull

git pull origin master

 git push origin master

git log --all --graph --decorate --oneline

alias registro="git log --all --graph --decorate --oneline" (esto es un alias con el nombre registro)

git tag -a v0.1 -m "Resusltado de las primeras clases del curso" e7a5c81 (al tag se le puede colocar un nombre en este caso v1.0)

git tag (para ver todos los tags)

git show-ref --tags (la forma de saber a que commit esta conectado el tag)

git push origin --tags(esto envia los tags a github)

git tag -d dormido (para borrrar un tag, dormido es el nombre del tag)

git push origin :refs/tags/dormido(borra el tag en github)

git show-branch (nos muestra cuales son las ramas que existen y su historia)

git show-branch --all (lo mismo pero con mas datos)

gitk (visual)

git push origin footer (para enviar las ramas)

git push origin cabecera

git clone https://github.com/Lucasutn/hyperblog.git

git config --get-regexp alias

git pull origin footer (trae una rama de github)

vi blogspost.html (para abrir el archivo en la consola)

git remote -v (sirve para ver todos los tag" de los link de github)

git stash (Regresar a un estado anterior, al ultimo commit, y guarda el estado modificado en un lugar temporal)

git stash list (ver la lista de cambios guardados)

git stash pop (Regresa al estado modificiado)

git stash branch english-version (crea una nueva rama con los cambios que estan guardados en temporal luego de utilizar el comando stash)

git stash drop (para borrar lo guardado temporal en stash )

git clean

git clean --dru-run (prueba* y ense√±a por consola los archivos que van a ser borrados, si utilizo el comando git clean)

git clean -f

git cherry-pick dca2a24 (comando para traer un commit de cualquier rama a la rama master(rama actual) al head)

git commit --amend (para remendar enmendar un commit anterior, pega los nuevos cambios al commit anterior, incluso puerdo cambiar el texto del commit)

git branch -D cabecera(para borrar un branch)

git reflog (muestra todos los cambios sucesos, similar a git log, pero mas completo en cuanto a los cambios)

git reset HEAD@{2} (Nos trae a la posicion donde nos encontrabamos con anterioridad poniendo el HEAD extrado con reflog, osea elegimos el estado/lugar al cual queremos regresar)

git reset --HARD 2634136

git grep color (para buscar cuantas veces aparece la palabra color en el proyecto, basicamente un buscador)

git grep -n color(mee dice en que Linea utilize la palabra color) 

git grep -c color (la cantiodad de veces que utilize la palabra color y el archivo donde)

git grep -c "<p>"

git log -S "cabecera" (me muestra todos los commit donde aparece la palabra cabecera o cabecera tiene algo que ver en)

grep para los archivos log para los commits

git shortlog (log por persona de los commmit por persona)

git shortlog -sn(personas que han hechos commits)

git shorlog -sn --all --no-merges

git shortlog -sn --all --no-merges

git config --global alias.stats "git shortlog -sn --all --no-merges"

git stats

git blame blogpost.html (para saber lineae por linea quien hizo tal y cual cosa)

git blame -c blogpost.html (lo mismo que el anterior comando pero mas organizado)

git blame css/estilos.css -L35,53(muestra solo las lineas indicadas en este caso desde la 35 a 53)

git blame css/estilos.css -L35,53 -c

git branch -r (ves ramas remotas en github)

git branch -a (ves todas las ramas locales y remotas)


$ git push -d <remote_name> <branch_name>
$ git branch -d <branch_name>

git push -d origin <branch_name>


$ git branch -d branch_name
$ git branch -D branch_name